###############################################################
#
#
# Clustering Library Functions
#
##
###############################################################

set.seed(20)

# kmeans clustering model
KmeansClustering <- function(DataFrame="",
                                   Columns="",
                                   GroupColumnName="MBC",
                                   NumberOfClusters="",
                                   ScaleData = TRUE,
                                   PlotModel = TRUE,
                                   Debug=TRUE)
{

  if (Columns == "")
  {
    Columns <- colnames(DataFrame)
  }
  
  if (ScaleData ==  TRUE)
  {
    df <- scale(DataFrame)     # Standardize the data
  } else {
    df <- DataFrame            # Not required (Might already be scaled)
  }
  
  if (NumberOfClusters == 0)
  {
    print("Using 5 as a default ... may not be optimal")
    Clusters <- kmeans(df,5)
    
  } else {
    
    Clusters <- kmeans(df,NumberOfClusters)
    
  }
  
  # Store the clusters and membership
  DataFrame$ClusterGroup <- Clusters$cluster
  DataFrame$membership  <- Clusters$membership
  
  # Plot if we are requested to
  if (PlotModel == TRUE)
  {
    print(fviz_cluster(list(data=df,cluster=Clusters$cluster),
                       ellipse.type = "norm",
                       repel = TRUE,
                       ellipse.level = 0.95,
                       palette = "jco",
                       ggtheme = theme_minimal(),
                       legend = "right",
                       main = "K-means clustering  plot"))
    
  }
  
  return(DataFrame)

}

# Get data
DataFrame = iris
DataFrame$Species <- NULL  # Remove the Species

NewDataFrame <- KmeansClustering(DataFrame = DataFrame,
                                       Columns="",
                                       GroupColumnName="MBC",
                                       NumberOfClusters=0,
                                       ScaleData = TRUE,
                                       PlotModel = TRUE,
                                       Debug=TRUE)
print(head(NewDataFrame))


FuzzyHkmeansClustering <- function(DataFrame="",
                            Columns="",
                            GroupColumnName="MBC",
                            NumberOfClusters="",
                            ScaleData = TRUE,
                            PlotModel = TRUE,
                            Debug=TRUE)
{
  # hierachical k-means
  library(factoextra)
  
  if (Columns == "")
  {
    Columns <- colnames(DataFrame)
  }
  
  if (ScaleData ==  TRUE)
  {
    df <- scale(DataFrame)     # Standardize the data
  } else {
    df <- DataFrame            # Not required (Might already be scaled)
  }
  
  if (NumberOfClusters == 0)
  {
    print("Using 5 as a default ... may not be optimal")
    Clusters <- hkmeans(df,5)
    
  } else {
    
    Clusters <- hkmeans(df,NumberOfClusters)
    
  }
  
  # Store the clusters and membership
  DataFrame$ClusterGroup <- Clusters$cluster
  DataFrame$membership  <- Clusters$membership
  
  # Plot if we are requested to
  if (PlotModel == TRUE)
  {
    print(fviz_cluster(list(data=df,cluster=Clusters$cluster),
                       ellipse.type = "norm",
                       repel = TRUE,
                       ellipse.level = 0.95,
                       palette = "jco",
                       ggtheme = theme_minimal(),
                       legend = "right",
                       main = "Hierarchical k-means clustering  plot"))
    
  }
  
  return(DataFrame)

}

# Get data
DataFrame = iris
DataFrame$Species <- NULL  # Remove the Species

NewDataFrame <- FuzzyHkmeansClustering(DataFrame = DataFrame,
                                Columns="",
                                GroupColumnName="MBC",
                                NumberOfClusters=0,
                                ScaleData = TRUE,
                                PlotModel = TRUE,
                                Debug=TRUE)
print(head(NewDataFrame))

FuzzyClustering <- function(DataFrame="",
                                  Columns="",
                                  GroupColumnName="MBC",
                                  NumberOfClusters="",
                                  ScaleData = TRUE,
                                  PlotModel = TRUE,
                                  Debug=TRUE)
{
  
  # Fuzzy clustering
  # Computes the mebersip of each group
  library(cluster)
  
  if (Columns == "")
  {
    Columns <- colnames(DataFrame)
  }
  
  if (ScaleData ==  TRUE)
  {
    df <- scale(DataFrame)     # Standardize the data
  } else {
    df <- DataFrame            # Not required (Might already be scaled)
  }
  
  if (NumberOfClusters == 0)
  {
    print("Using 5 as a default ... may not be optimal")
    Clusters <- fanny(df,5,metric = "euclidean", stand = FALSE)
    
  } else {
    
    Clusters <- fanny(df,NumberOfClusters,metric = "euclidean", stand = FALSE)
    
  }
  
  # Store the clusters and membership
  DataFrame$ClusterGroup <- Clusters$cluster
  DataFrame$membership  <- Clusters$membership
  
  # Plot if we are requested to
  if (PlotModel == TRUE)
  {
    print(fviz_cluster(list(data=df,cluster=Clusters$cluster),
                       ellipse.type = "norm",
                       repel = TRUE,
                       ellipse.level = 0.95,
                       palette = "jco",
                       ggtheme = theme_minimal(),
                       legend = "right",
                       main = "Fuzzy clustering  plot"))
    
  }

  return(DataFrame)

}

# Get data
DataFrame = iris
DataFrame$Species <- NULL  # Remove the Species

NewDataFrame <- FuzzyClustering(DataFrame = DataFrame,
                                      Columns="",
                                      GroupColumnName="MBC",
                                      NumberOfClusters=0,
                                      ScaleData = TRUE,
                                      PlotModel = TRUE,
                                      Debug=TRUE)
print(head(NewDataFrame))

FuzzyCMeansClustering <- function(DataFrame="",
                                  Columns="",
                                  GroupColumnName="MBC",
                                  NumberOfClusters="",
                                  ScaleData = TRUE,
                                  PlotModel = TRUE,
                                  Debug=TRUE)
{
  # Compute fuzzy clustering
  library(e1071)
  
  if (Columns == "")
  {
    Columns <- colnames(DataFrame)
  }
  
  if (ScaleData ==  TRUE)
  {
    df <- scale(DataFrame)     # Standardize the data
  } else {
    df <- DataFrame            # Not required (Might already be scaled)
  }
  
  if (NumberOfClusters == 0)
  {
    print("Using 5 as a default ... may not be optimal")
    Clusters <- cmeans(df,5)
    
  } else {
    
    Clusters <- cmeans(df,NumberOfClusters)
    
  }
  
  DataFrame$ClusterGroup <- Clusters$cluster
  DataFrame$membership  <- Clusters$membership
  
  if (PlotModel == TRUE)
  {
    print(fviz_cluster(list(data=df,cluster=Clusters$cluster),
                       ellipse.type = "norm",
                       repel = TRUE,
                       ellipse.level = 0.95,
                       palette = "jco",
                       ggtheme = theme_minimal(),
                       legend = "right",
                       main = "Fuzzy CMeans clustering  plot"))
    
  }
  
  return(DataFrame)
  
}

# Get data
DataFrame = iris
DataFrame$Species <- NULL  # Remove the Species

NewDataFrame <- FuzzyCMeansClustering(DataFrame = DataFrame,
                                      Columns="",
                                      GroupColumnName="MBC",
                                      NumberOfClusters=0,
                                      ScaleData = TRUE,
                                      PlotModel = TRUE,
                                      Debug=TRUE)
print(head(NewDataFrame))


# Model Based Clustering (Gaussian Mixture Modelling for Model-Based Clustering,
# Classification, and Density Estimation)
ModelBasedClustering <- function(DataFrame="",
                                 Columns="",
                                 GroupColumnName="MBC",
                                 NumberOfClusters="",
                                 ScaleData = TRUE,
                                 PlotModel = TRUE,
                                 Debug=TRUE)
{
  
  library(mclust)
  
  if (Columns == "")
  {
    Columns <- colnames(DataFrame)
  }
  
  if (ScaleData ==  TRUE)
  {
    df <- scale(DataFrame)     # Standardize the data
  } else {
    df <- DataFrame            # Not required (Might already be scaled)
  }
  
  if (NumberOfClusters == 0)
  {
    Clusters <- Mclust(df)
  } else {
    Clusters <- Mclust(df,NumberOfClusters)
  }
  
  DataFrame$ClusterGroup <- Clusters$classification
  DataFrame$membership <- 1 - Clusters$uncertainty
  
  if (PlotModel == TRUE) {plot(Clusters,what = c("density"))}  # "BIC", "density", "diagnostic"
  
  if (Debug == TRUE) {print(paste("Number of observations",Clusters$n))}
  if (Debug == TRUE) {print(paste("Number of groups",Clusters$G))}
  
  return(DataFrame)
  
}

# Get data
DataFrame = iris
DataFrame$Species <- NULL  # Remove the Species

NewDataFrame <- ModelBasedClustering(DataFrame = DataFrame,
                                     Columns="",
                                     GroupColumnName="MBC",
                                     NumberOfClusters=0,
                                     ScaleData = TRUE,
                                     PlotModel = TRUE,
                                     Debug=TRUE)
print(head(NewDataFrame))
